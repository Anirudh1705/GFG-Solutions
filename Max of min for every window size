class Solution {
    private static int[] nse(int[] arr)
    {
        int n = arr.length;
        int[] res = new int[n];
        ArrayDeque<Integer> st = new ArrayDeque<>();
        for(int i=n-1;i>=0;i--)
        {
            while(!st.isEmpty() &&arr[st.peek()]>=arr[i])
            st.pop();
            if(st.isEmpty())
            res[i] = n;
            else
            res[i] = st.peek();
            st.push(i);
        }
        return res;
    }
    private static int[] pse(int[] arr)
    {
        int n = arr.length;
        int[] res = new int[n];
        ArrayDeque<Integer> st = new ArrayDeque<>();
        for(int i=0;i<n;i++)
        {
            while(!st.isEmpty() &&arr[st.peek()]>=arr[i])
            st.pop();
            if(st.isEmpty())
            res[i] = -1;
            else
            res[i] = st.peek();
            st.push(i);
        }
        return res;
    }
    public ArrayList<Integer> maxOfMins(int[] arr) {
        int n = arr.length;
        ArrayList<Integer> res = new ArrayList<>(Collections.nCopies(n,Integer.MIN_VALUE));
        if(arr==null||arr.length ==0)
        return res;
        //int n = arr.length;
        int[] nseArr = nse(arr);
        int[] pseArr = pse(arr);
        
        //Arrays.fill(res,Integer.MIN_VALUE);
        for(int i=0;i<n;i++)
        {
            // Length of window in which arr[i] is the minimum
            int spanCurrElementLen = nseArr[i]-pseArr[i]-1; 
            
            //len-1 coz of zero based indexing
            // arr[i] is a candidate for window of size 'len'
            res.set(spanCurrElementLen-1,Math.max(res.get(spanCurrElementLen-1),arr[i]));
        }
        
        //Some values in result[] may not have been filled (i.e., for some window sizes, no element was the minimum).
//We ensure that smaller window sizes inherit the maximum of minimum values from larger window sizes.
    for(int i=n-2;i>=0;i--)
    {
        res.set(i,Math.max(res.get(i),res.get(i+1)));
    }
        return res;
    }
}
