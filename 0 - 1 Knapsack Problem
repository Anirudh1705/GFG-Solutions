class Solution {
    // Function to return max value that can be put in knapsack of capacity.
     static int knapSack(int capacity, int val[], int wt[]) {
        // code here
        int n = val.length;
        int dp[][] = new int[n][capacity+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<capacity+1;j++){
                dp[i][j] = -1;
            }
        }
        return recur(capacity, val, wt, n-1,dp);
    }
    static int recur(int capacity, int val[], int wt[], int index, int dp[][]){
        // base case
        if(capacity == 0) {
            dp[index][capacity] = 0;
            return 0;
        }
        if(index==0){
            if(wt[index]<=capacity){
                dp[index][capacity] = val[index];
                return val[index];
            }else{
                dp[index][capacity] = 0;
                return 0;
            }
        }
        if(dp[index][capacity]!=-1){
            return dp[index][capacity];
        }
        int pick = 0;
        if(wt[index] <= capacity){
            pick = val[index] + recur(capacity - wt[index], val, wt, index-1, dp);
        }

        int noPick = 0 + recur(capacity, val, wt, index-1,dp);
        dp[index][capacity] = Math.max(pick, noPick);
        return dp[index][capacity];
    }
}
